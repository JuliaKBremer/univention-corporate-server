#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
"""\
{prog}: tool for removing packages from local repository

Syntax:
  {prog} --file <debian_package>...
  {prog} [--help]

"""
# Copyright 2004-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import sys
import getopt

import univention.updater.repository as urepo
from univention.updater.locking import UpdaterLock


def usage(fd=sys.stdout):
    """
    Print usage message.

    :param file fd: Override standard error output. Defaults to :py:obj:`sys.stdout`.
    """
    fd.write(__doc__.format(prog=os.path.basename(__file__)))


def parse_args():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] in ['-h', '-?', '--help']:
        usage()
        sys.exit(0)

    longopts = ['file=']
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', longopts)
    except getopt.error as msg:
        print msg
        sys.exit(1)

    files = []
    for opt, val in opts:
        if opt == '--file':
            files.append(val)

    if len(files) > 0:
        files += args

    if len(files) < 1:
        usage()
        sys.exit(1)

    return files


def main():
    files = parse_args()
    urepo.assert_local_repository()

    with UpdaterLock():
        dirs = set()

        for filename in files:
            if not os.path.exists(filename):
                continue
            if filename.endswith('.deb') or filename.endswith('.udeb'):
                dirname = os.path.dirname(filename)
                basedir = urepo.get_repo_basedir(dirname)
                dirs.add(basedir)
                os.unlink(filename)

        for path in dirs:
            urepo.update_indexes(path, update_only=True)


if __name__ == '__main__':
    main()
