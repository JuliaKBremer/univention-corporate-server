#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
"""\
{prog}: tool for merging packages directories

Syntax:
  {prog} --dest <destination_dir> --src <source_dir> [--src <source_dir>]
  {prog} [--help]

"""
# Copyright 2004-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import shutil
import sys
import getopt

import univention.updater.repository as urepo
from univention.updater.locking import UpdaterLock
from debian.debfile import DebFile
from apt import apt_pkg

l_package = {}  # type: Dict[Tuple[str, str], Tuple[str, str, int]] # (package, arch) -> (filename, version, in_dst)
p_remove = []


def usage(fd=sys.stdout):
    """
    Print usage message.

    :param file fd: Override standard error output. Defaults to :py:obj:`sys.stdout`.
    """
    fd.write(__doc__.format(prog=os.path.basename(__file__)))


def walking(in_dst, dirname, names):
    """ Update l_package hash with new and p_remove hash with obsolete .deb files """
    for f in names:
        filename = os.path.join(dirname, f)

        if filename.endswith('.deb') or filename.endswith('.udeb'):
            debfile = DebFile(filename)
            control = debfile.debcontrol()

            package = control['Package']
            version = control['Version']
            arch = control['Architecture']
            key = (package, arch)
            value = (filename, version, in_dst)
            record = l_package.setdefault(key, value)
            if record != value:
                old_filename, old_version = record[:2]
                if apt_pkg.version_compare(version, old_version) > 0:
                    p_remove.append(old_filename)
                    l_package[key] = value
                else:
                    p_remove.append(filename)


def cleanup_repository(fp_debug, dirname, names):
    """ Remove all .deb files recursively from directory """
    for name in names:
        filename = os.path.join(dirname, name)
        if not os.path.isfile(filename):
            continue
        if filename.endswith('.deb') or filename.endswith('.udeb'):
            remove(filename, fp_debug)


def remove(filename, fp_debug):
    """Remove file."""
    try:
        os.unlink(filename)
    except EnvironmentError:
        fp_debug.write('Warning: failed to remove %s\n' % filename)


def parse_args():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] in ['-h', '-?', '--help']:
        usage()
        sys.exit(0)

    longopts = ['dest=', 'src=']
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', longopts)
    except getopt.error as msg:
        print(msg)
        sys.exit(1)

    source_dirs = []
    for opt, val in opts:
        if opt == '--dest':
            destination_dir = val
        elif opt == '--src':
            src = urepo.get_repo_basedir(val)
            source_dirs.append(src)

    if not destination_dir:
        usage()
        sys.exit(1)

    destination_dir = urepo.get_repo_basedir(destination_dir)

    if len(source_dirs) < 1:
        usage()
        sys.exit(1)

    return destination_dir, source_dirs


def main():
    destination_dir, source_dirs = parse_args()

    with UpdaterLock():
        if not os.path.exists(destination_dir):
            os.mkdir(destination_dir)
        os.path.walk(destination_dir, walking, True)

        for dirname in source_dirs:
            src = urepo.get_repo_basedir(dirname)
            os.path.walk(src, walking, False)

        fp_debug = open('/var/log/univention/repository.log', 'a+')
        for ((_package, arch), (filename, _version, in_dst)) in l_package.iteritems():
            if not in_dst:
                try:
                    dest = os.path.join(destination_dir, arch)
                    shutil.copy(filename, dest)
                except EnvironmentError:
                    fp_debug.write('Error: failed to copy %s\n' % dest)

        for f in p_remove:
            remove(f, fp_debug)

        for dirname in source_dirs:
            if dirname == destination_dir:
                continue
            os.path.walk(dirname, cleanup_repository, fp_debug)

            urepo.update_indexes(dirname, stdout=fp_debug, stderr=fp_debug)

        urepo.update_indexes(destination_dir, stdout=fp_debug, stderr=fp_debug)
        fp_debug.close()


if __name__ == '__main__':
    main()
