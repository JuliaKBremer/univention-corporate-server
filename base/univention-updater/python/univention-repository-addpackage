#!/usr/bin/python2.7
# -*- coding: utf-8 -*-
"""\
{prog}: tool for adding packages to local repository

Syntax:
  {prog} --dest <destination_dir> --file <debian_package>...
  {prog} [--help]

"""
# Copyright 2004-2018 Univention GmbH
#
# http://www.univention.de/
#
# All rights reserved.
#
# The source code of this program is made available
# under the terms of the GNU Affero General Public License version 3
# (GNU AGPL V3) as published by the Free Software Foundation.
#
# Binary versions of this program provided by Univention to you as
# well as other copyrighted, protected or trademarked materials like
# Logos, graphics, fonts, specific documentations and configurations,
# cryptographic keys etc. are subject to a license agreement between
# you and Univention and not subject to the GNU AGPL V3.
#
# In the case you use this program under the terms of the GNU AGPL V3,
# the program is provided in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public
# License with the Debian GNU/Linux or Univention distribution in file
# /usr/share/common-licenses/AGPL-3; if not, see
# <http://www.gnu.org/licenses/>.

import os
import shutil
import sys
import getopt
import re

import univention.updater.repository as urepo
from univention.updater.locking import UpdaterLock


def usage(fd=sys.stdout):
    """
    Print usage message.

    :param file fd: Override standard error output. Defaults to :py:obj:`sys.stdout`.
    """
    fd.write(__doc__.format(prog=os.path.basename(__file__)))


def rewrite_url(url):
    """ Replace illegal characters in url with underscores """
    for i in ',% ':
        url = url.replace(i, '_')

    return url


def parse_args():
    if len(sys.argv) < 2:
        usage()
        sys.exit(1)

    if sys.argv[1] in ['-h', '-?', '--help']:
        usage()
        sys.exit(0)

    longopts = ['dest=', 'file=']
    try:
        opts, args = getopt.getopt(sys.argv[1:], '', longopts)
    except getopt.error as msg:
        print(msg)
        sys.exit(1)

    files = []
    packages_dir = ''
    for opt, val in opts:
        if opt == '--dest':
            packages_dir = val
        elif opt == '--file':
            files.append(val)

    if len(files) > 0:
        files += args

    if not packages_dir:
        print >> sys.stderr, "Error: Destination directory not specified."
        sys.exit(1)

    # check if destination directory exists
    if not os.path.isdir(packages_dir):
        print >> sys.stderr, "Error: Destination either does not exist or is no directory."
        sys.exit(1)

    if len(files) < 1:
        print >> sys.stderr, "Error: No Debian packages specified."
        sys.exit(1)

    return packages_dir, files


def main():
    packages_dir, files = parse_args()
    urepo.assert_local_repository()

    with UpdaterLock():
        packages_path = urepo.get_repo_basedir(packages_dir)

        # if file expansion is used (as in --file /tmp/*.deb), and no such file exists,
        # we should issue a warning
        fileProcessed = False

        regexp_arch = re.compile('.*_([a-z0-9]*).u?deb')
        for filename in files:
            if not os.path.exists(filename):
                continue
            if filename.endswith('.deb') or filename.endswith('.udeb'):
                fileProcessed = True
                match = regexp_arch.match(filename)
                if not match:
                    print >> sys.stderr, 'Warning: Could not determine architecture of package %s. It will not be added' % filename
                    continue
                arch, = match.groups()
                targetfilename = os.path.join(packages_path, arch, rewrite_url(os.path.basename(filename)))
                try:
                    shutil.copyfile(filename, targetfilename)
                except (EnvironmentError, KeyboardInterrupt) as e:
                    print >> sys.stderr, "Warning: copying of %s failed: %s" % (filename, e)
                    if os.path.exists(targetfilename):
                        os.remove(targetfilename)  # remove incomplete package file
                        print >>sys.stderr, "Warning: Removed incomplete file"
                    if isinstance(e, KeyboardInterrupt):
                        print >>sys.stdout, "Interrupted by user."
                        sys.exit(1)

        if not fileProcessed:
            print >>sys.stdout, "Warning: No packages found, no packages added"
            # shortcut exit, since there's nothing left to be done
            sys.exit(0)

        urepo.update_indexes(packages_path, update_only=True)


if __name__ == '__main__':
    main()
